#!/usr/bin/env python

import argparse
import json
import subprocess
import socket


def read_config_file(filename):
    with open(filename, "r") as f:
        config = json.load(f)
    return config


def build_image(config):
    image_name = config["image"]["name"]
    repo_name = config["image"]["repo"]
    docker_file = config["image"]["dockerfile"]
    subprocess.run(
        ["docker", "build", "-f", f"{docker_file}",
         "-t", f"{repo_name}/{image_name}", "."])


def is_port_open(port):
    # Create a socket object
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        try:
            # Try to connect to the localhost on the specified port
            sock.connect(("localhost", port))
            # If the connection is successful, the port is open
            print(f"Port {port} is open.")
            return True
        except ConnectionRefusedError:
            # If the connection is refused, the port is closed or not reachable
            print(f"Port {port} is closed or not reachable.")
            return False


def find_open_port(start_port):
    # Use a try-except block to handle potential exceptions
    try:
        # Iterate over subsequent port numbers
        for port in range(start_port, 65536):
            if not is_port_open(port):
                return port
    except KeyboardInterrupt:
        # Allow user to interrupt the process by pressing Ctrl+C
        print("Process interrupted by user.")
    except Exception as e:
        # Handle other exceptions gracefully
        print(f"An error occurred: {str(e)}")

    # Return None if no open port is found
    return None


def is_container_paused(container_name):
    command = """docker inspect --format="{{.State.Paused}}" """ + \
        f'{container_name}'
    result = subprocess.run(command, shell=True,
                            capture_output=True, text=True)
    output = result.stdout.strip()
    return output == "true"


def is_container_running(container_name):
    command = """docker inspect --format="{{.State.Running}}" """ + \
        f'{container_name}'
    result = subprocess.run(command, shell=True,
                            capture_output=True, text=True)
    output = result.stdout.strip()
    return output == "true"


def is_container_allocated(container_name):
    container_exists = False
    result = subprocess.run(["docker", "ps", "-a", "--filter",
                             f"name={container_name}",
                             "--format", "{{.Names}}"],
                            capture_output=True, text=True)

    # Check if the container already exists
    if container_name in result.stdout.strip().split('\n'):
        container_exists = True

    return container_exists


def check_container_status(config):
    container_name = config["container"]["name"]

    if is_container_allocated(container_name):
        container_state = "Paused" if is_container_paused(
            container_name) else "Allocated"
        container_state = container_state if is_container_running(
            container_name) else "Stopped"
        print(f"Container: {container_name}={container_state}")
    else:
        print(f"Container: {container_name}=Deallocated")


def start_container(config):
    container_name = config["container"]["name"]
    image_name = config["image"]["name"]
    repo_name = config["image"]["repo"]
    volume_mount_point = config["volume"]["mount-point"]
    host_directory = config["volume"]["host-directory"],
    portmaps = [f"{portnumber}:{portnumber}"
                for portnumber in config["ports"]["public"]]

    if is_container_allocated(container_name):
        # Start the existing container

        if is_container_paused(container_name):
            subprocess.run(["docker", "unpause", container_name])
        else:
            subprocess.run(["docker", "start", "-a", container_name])
    else:
        # Create and start a new container
        run_list = ["docker", "run", "--name", container_name,
                    "-v", f"{host_directory[0]}:{volume_mount_point}"]

        for portmap in portmaps:
            run_list += ["-p", portmap]

        if "gpu" in config.keys():
            if "gpus" in config["gpu"].keys():
                run_list += ["--gpus", config["gpu"]["gpus"]]

            for ulimit in config["gpu"]["ulimit"]:
                run_list += ["--ulimit", ulimit]

        if "docker" in config.keys() and \
                "options" in config["docker"].keys():
            for opt, value in config["docker"]["options"].items():
                run_list += [opt, value]

        if "jupyter" in config["ports"].keys():
            jupyter_port = config["ports"]["jupyter"]
            jupyter_port = find_open_port(jupyter_port)
            if jupyter_port not in config["ports"]["public"]:
                run_list += ["-p", f"{jupyter_port}:{jupyter_port}"]
            run_list += ["-e", f"JUPYTER_PORT={jupyter_port}"]

        run_list += [f"{repo_name}/{image_name}"]

        print(run_list)
        subprocess.run(run_list)


def commit_container(config):
    container_name = config["container"]["name"]
    commit_name = config["commit"]["name"]
    repo = config["commit"]["repo"]
    subprocess.run(
        ["docker", "commit", container_name, f"{repo}/{commit_name}"])


def save_container(config):
    container_name = config["container"]["name"]
    commit_name = config["commit"]["name"]
    repo = config["commit"]["repo"]
    host_directory = config["volume"]["host-directory"]
    subprocess.run(
        ["docker", "cp", f"{host_directory}",
         f"{container_name}:/tf/archive/"])
    subprocess.run(
        ["docker", "commit", container_name, f"{repo}/{commit_name}"])


def push_container(config):
    commit_name = config["commit"]["name"]
    repo = config["container"]["repo"]
    subprocess.run(["docker", "push", f"{repo}/{commit_name}"])


def connect_container(config):
    container_name = config["container"]["name"]
    subprocess.run(["docker", "exec", "-ti", container_name, "/bin/bash"])


def stop_container(config):
    container_name = config["container"]["name"]
    subprocess.run(["docker", "stop", container_name])


def pause_container(config):
    container_name = config["container"]["name"]
    subprocess.run(["docker", "pause", container_name])


def delete_container(config):
    container_name = config["container"]["name"]

    stop_result = stop_container(config)
    if stop_result == 0:
        print(f"Stopped container {container_name}")
    else:
        print(f"Container {container_name} not running")

    subprocess.run(["docker", "rm", container_name])
    print(f"Deleted container {container_name}")


def main():
    parser = argparse.ArgumentParser(description="Transfer control script")
    parser.add_argument("config", nargs="?", default="configuration.json",
                        help="Configuration file (default: configuration.json)")
    parser.add_argument("--build", action="store_true", help="Build the image")
    parser.add_argument("--start", action="store_true",
                        help="Start the container")
    parser.add_argument("--pause", action="store_true",
                        help="Pause the container")
    parser.add_argument("--commit", action="store_true",
                        help="Commit the container")
    parser.add_argument("--push", action="store_true",
                        help="Push the tagged image")
    parser.add_argument("--save", action="store_true",
                        help="Save the container")
    parser.add_argument("--status", action="store_true",
                        help="Check container status")
    parser.add_argument("--connect", action="store_true",
                        help="Launch a shell in the container")
    parser.add_argument("--stop", action="store_true",
                        help="Stop the container")
    parser.add_argument("--delete", action="store_true",
                        help="Delete the container")
    args = parser.parse_args()

    config = read_config_file(args.config)

    if args.build:
        build_image(config)
    elif args.start:
        start_container(config)
    elif args.commit:
        commit_container(config)
    elif args.save:
        save_container(config)
    elif args.push:
        push_container(config)
    elif args.stop:
        stop_container(config)
    elif args.pause:
        pause_container(config)
    elif args.status:
        check_container_status(config)
    elif args.connect:
        connect_container(config)
    elif args.delete:
        delete_container(config)


if __name__ == "__main__":
    main()
